@usedefaults

h2. Demo Setup For AgentController & Agents

This tutorial will explain how to get started with a debug environment for the agentcontroller.
This can be used to experiment with Jumpscale & the Grid & Agentcontroller Framework.

h3. requirements

* ubuntu 14.04 64 bit  (it possibly works on other ubuntu versions too but is not tested)
* install jumpscale in debug mode see [@todo]

h3. install an all in 1 grid master

* a grid master has everything required to manage a grid

{{include:GridMasterAllInOneInstall}}

to start the agent

{{code:
cd /opt/jumpscale/apps/jsagent/
python jsagent.py
}}



h3. test the worker functionality on the gridmaster node itself

{{code:
cd /opt/jumpscale/apps/jsagent/
python workertest.py
}}

{{code:
from JumpScale import j

j.application.start("jumpscale:workertest")

import JumpScale.baselib.redisworker

def atest(msg):
    print msg
    # raise RuntimeError("e")
    return msg

w=j.clients.redisworker

def test1():
    print "START"
    for i in range(10):
        job=w.execFunction( method=atest, _category='mytest', _organization='unknown', _timeout=60, _queue='default', _log=True,_sync=True, msg="this is a test")
    print job
    print "STOP"

print w.getQueuedJobs()

test1()

j.application.stop()
}}

here you execute a function remotely in the worker of the jsagent.
This will be executed async and result returned.
This is handy to shedule & launch long running jobs.

h3. work with multiple agents in debug mode

* on a new ubuntu 14.04 server where jumpscale is installed in debug mode

{{code:
jpackage install -n jsagent
}}

this will have installed a jsagent & the jsagent registers to the agentcontroller.

to start the agent

{{code:
cd /opt/jumpscale/apps/jsagent/
python jsagent.py
}}

you can ofcourse put this agent in init.d or so
(PS on the roadmap (Q4 2014) the agent will register itself optionally in init.d and work as daemon)

h3. Visit Gridportal and see the different nodes (agents)

The grid portal gives you an overview what is going on your environment singore or multigrid.
* [Nodes|http://localhost:82/grid/Nodes]
* [Jobs|http://localhost:82/grid/Jobs]
* [Errors|http://localhost:82/grid/ECOs]

It also provides a status overview [see|http://localhost:82/grid/checkstatus].

@todo some more info here about purpose of gridportal
@todo make sure nics & some other relevant info is pushed onto the gridportal

h3. JumpScripts Basics

{{include:JumpScript}}

h3. Executing JumpScripts.

One can use [JSac|./../ShellCommands/JSAC.html] to interact with the AgentController and execute remote scripts.

{{code:
jsac exec -o jumpscale -n exec -a cmd:hostname -nid 1
Job:

achost: 127.0.0.1
args: {cmd: hostname}
category: jumpscale
cmd: exec
errorreport: false
gid: 77
guid: f2b57166e0a9_77_2
id: 2
jscriptid: 48
log: false
nid: 1
parent: null
queue: ''
result: [0, 'jsagent

    ']
resultcode: 0
roles: []
sessionid: 77_1_0_91c0b8f2-725d-4599-824a-c42a4f1c9021
state: OK
timeStart: 1413724079
timeStop: 1413724079
timeout: 600
wait: true

}}

goals of this section
* create a new jumpscript & reload the jumpscript on the jsagents
* see that this jumpscript can be called
* show output of jumpscript
* show where to see it in the gridportal
* show what happens when there is an error

so basically is a demonstration of the full end2end functionality of the agentcontroller/jsagent system

@todo add screenshots to explain

h3. Recurring JumpScripts

goals this section
* expain how to create recurring jumpscripts and how they get scheduled
* show how the jumpscripts can be seen on portal
* show that from the jumpscript page you can see when & where the jumpscripts where executed
* show that if error where result is seen and how to debug (use a error generating jumpscript)

@todo add screenshots to explain







