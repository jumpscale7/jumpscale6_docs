h2. Configuring a Space

A space is a collection of pages. Every page in a space must have a unique name. Every space can be configured independently, with its own style and user management.
All configuration files of a space are stored in the .space directory, located in the root of the space.

In this section you find the list of configuration files that can be used in a space.

{{toc:start=2}}

h3. acl.cfg

In the acl.cfg configuration file, you can define the different rights to the defined groups. The following rights can be assigned:

* R: read-only
* W: read/write
* S: synchronize the documentation to a local file system
* A: administrator right
* \*: all rights

The definition of user and group rights has the following structure:

<group name>: <rights>
<user name>: <rights>


h3. default.wiki

The default.wiki file is the landing page of the space. This page defines the default parameters of the space. In this page you define the different sections that each page of the space will contain.

The following parameters are accepted:

* `title`: defines the name that appears on your Internet browser's tab and title bar.
** Usage: `\{\{title: <your title>\}\}`
* `projectname`: the name of your complete project, not limited to the documentation.
** Usage: `\{\{projectname: <your project name>\}\}`
* `find`: adds a search box to find information in the space.
** Usage: `\{\{find\}\}`
* `menu`: adds a menu item to the horizontal menu bar. 
** Usage: `\{\{menu: @LF <menu label>: <root page name>\}\}`
* `menuadmin`: adds the administrator menu to the horizontal menu bar.
** Usage: `\{\{menuadmin\}\}`
* `navigation`: adds a navigation menu. 
** Usage: `\{\{navigation\}\}`
* `content`: adds the content of the wiki pages that you create.
** Usage: `\{content\}`
** Single curly braces instead of double curly braces!

To define the sections of each page, you have the following parameters:

* `\@block`: displays a table in which you can define rows and columns. For example, when you want to add a fixed footer, you can add a block for the content and another one for the footer.
* `\@row`: creates a row in a block.
* `\@col`: creates a column in a block. You can add the width of the column as extra parameter, for example \@col 3.
* `\@divend`: indicates the end of an HTML div section.


h3. nav.wiki

This page is the default navigation page of the space. The page is used by the navigation macro.


h3. notfound.wiki

This page is shown when a requested page can not be found. This page will replace the default HTTP Not Found page. You can put any information on this page, using the default wiki style.


h3. template.wiki

The template.wiki file is the default wiki file which is used as template when a new page is created in the space.



h2. Saving the space to Mercurial

Adding the space to bitbucket helps you save your work & share your work with other team members.

h3. Create Mercurial repository for the space

* Open ssh to the server
* `cd` to the directory containing the code
* Create a repo `hg init`
* Add all files to the repo `hg add .`
* Commit the files (save the files) `hg commit -u my_username -m "Commit message describing what I did"`


h3. Committing after changing files
* Tell Mercurial to consider missing files deleted, and add any new files to the repo `hg addremove`
* Commit the files (save the files) `hg commit -u my_username -m "Commit message describing what I did"`

h3. Push your changes to bitbucket
* Make sure everything is comitted
* Inside this directory, add this content
{{code:
[paths]
default = https://bitbucket.org/incubaid/repo_name
}}
* To push `hg push`
* Enter your bitbucket credentials

h3. How to pull the latest changes from bitbucket
* To pull all the changes from bitbucket & update to the latest version `hg pull -u`

h3. How to pull & update from the admin menu
If you're logged in to the portal as admin, you will see the admin menu on the top. This allows you to pull & update without being logged in to the server with ssh. To work, it requires the credentials to be configured on the server.

To configure the credentials, add them to your `~/.hgrc` as the following example

{{code:
[auth]
bb_incubaid.prefix = bitbucket.org/incubaid    # Apply these credentials when the bitbucket repo URL starts with this prefix
bb_incubaid.schemes = http https
bb_incubaid.username = qp55pq                  # bitbucket username
bb_incubaid.password = qp55pq                  # bitbucket password
}}

h2. Publishing the space on its URL
nginx is a web server just like Apache & IIS. If you want to make a space has its own URL, you need to configure nginx.

* Login to nginx machine 172.19.49.230 (ask Tomas for access)
* `cd /etc/nginx/sites-available/`
* Create a new configuration file with the URL, e.g. `www.my_space.com.conf`. It works for subdomains also, e.g. `docs.my_space.com.conf`
* Add this content to the file (we will use `www.my_space.com` as an example)

{{code:
server {
        access_log  /var/log/nginx/www.my_space.com.log ;
        listen 80;

        server_name www.my_space.com;

        location / {
                proxy_set_header        X-Real-IP       $remote_addr;
                proxy_pass http://172.19.49.185/my_space/; # Put the space here
        }

        location /my_space {
                proxy_set_header        X-Real-IP       $remote_addr;
                proxy_pass http://172.19.49.185/my_space;
        }

        location /images {
                proxy_set_header  X-Real-IP $remote_addr;
                proxy_pass http://172.19.49.185/images;
        }


        location /lib {
                proxy_set_header        X-Real-IP       $remote_addr;
                proxy_pass http://172.19.49.185/lib/;
        }

        location /restmachine {
                proxy_set_header        X-Real-IP       $remote_addr;
                proxy_pass http://172.19.49.185/restmachine/;
        }

}
}}


 
