h3. j.errorconditionhandler

* path: /core/errorhandling/ErrorConditionHandler.py

h4. checkErrorIgnore

* params: eco
* path:/core/errorhandling/ErrorConditionHandler.py (line:339)

h4. escalateBugToDeveloper

* params: errorConditionObject,tb
* path:/core/errorhandling/ErrorConditionHandler.py (line:646)

h4. excepthook

* params: ttype,pythonExceptionObject,tb
* path:/core/errorhandling/ErrorConditionHandler.py (line:308)

every fatal error in jumpscale or by python itself will result in an exception
in this function the exception is caught.
This routine will create an errorobject & escalate to the infoserver
@ttype : is the description of the error
@tb : can be a python data object or a Event

h4. getErrorConditionObject

* params: ddict,msg,msgpub,category,level,type,tb
* path:/core/errorhandling/ErrorConditionHandler.py (line:179)

@data is dict with fields of errorcondition obj
returns only ErrorConditionObject which should be used in jumpscale to define an errorcondition (or potential error condition)

h4. getErrorTraceKIS

* params: tb
* path:/core/errorhandling/ErrorConditionHandler.py (line:394)

h4. getFrames

* params: tb
* path:/core/errorhandling/ErrorConditionHandler.py (line:351)

h4. halt

* params: msg
* path:/core/errorhandling/ErrorConditionHandler.py (line:730)

h4. lastActionClear

* params: 
* path:/core/errorhandling/ErrorConditionHandler.py (line:640)

clear last action so is not printed when error

h4. lastActionSet

* params: lastActionDescription
* path:/core/errorhandling/ErrorConditionHandler.py (line:634)

will remember action you are doing, this will be added to error message if filled in

h4. parsePythonErrorObject

* params: pythonExceptionObject,ttype,tb,level,message
* path:/core/errorhandling/ErrorConditionHandler.py (line:210)

how to use

try:
    ##do something            
except Exception,e:
    eco=j.errorconditionhandler.parsePythonErrorObject(e)

eco is jumpscale internal format for an error 
next step could be to process the error objecect (eco) e.g. by j.errorconditionhandler.processErrorConditionObject(eco)
    
@param pythonExceptionObject is errorobject thrown by python when there is an exception
@param ttype : is the description of the error, can be None
@param tb : can be a python data object for traceback, can be None

@return a ErrorConditionObject object as used by jumpscale (should be the only type of object we send around)

h4. parsepythonExceptionObject

* params: 
* path:/core/errorhandling/ErrorConditionHandler.py (line:305)

h4. processErrorConditionObject

* params: errorConditionObject,tostdout,sentry,modulename,centralsentry
* path:/core/errorhandling/ErrorConditionHandler.py (line:420)

a errorObject gets processed which means stored locally or forwarded to a logserver or both
@return [ecsource,ecid,ecguid]

you can overrule this behaviour by changing at rutime this function with a new one e.g. following code could work

### code:
def myProcessErrorConditionObject(eco):
    print eco

j.errorconditionhandler.processErrorConditionObject=myProcessErrorConditionObject
###

now there would be no further processing appart from priting the errorcondition object (eco)

h4. processPythonExceptionObject

* params: pythonExceptionObject,ttype,tb,level,message,sentry
* path:/core/errorhandling/ErrorConditionHandler.py (line:188)

how to use

try:
    ##do something            
except Exception,e:
    j.errorconditionhandler.processpythonExceptionObject(e)
    
@param pythonExceptionObject is errorobject thrown by python when there is an exception
@param ttype : is the description of the error, can be None
@param tb : can be a python data object for traceback, can be None

@return [ecsource,ecid,ecguid]

the errorcondition is then also processed e.g. send to local logserver and/or stored locally in errordb
see j.errorconditionhandler.processErrorConditionObject how to use this and overrule the behaviour

h4. raiseBug

* params: message,category,pythonExceptionObject,pythonTraceBack,msgpub,die,tags,level
* path:/core/errorhandling/ErrorConditionHandler.py (line:52)

use this to raise a bug in the code, this is the only time that a stacktrace will be asked for
level will be Critical
@param message is the error message which describes the bug
@param msgpub is message we want to show to endcustomers (can include a solution)
@param category is a dot notation to give category for the error condition
@param pythonExceptionObject is the object as it comes from a try except statement

try:
    ##do something            
except Exception,e:
    j.errorconditionhandler.raiseBug("an error",category="exceptions.init",e)

h4. raiseCritical

* params: message,category,pythonExceptionObject,pythonTraceBack,msgpub,die,tags,level
* path:/core/errorhandling/ErrorConditionHandler.py (line:52)

use this to raise a bug in the code, this is the only time that a stacktrace will be asked for
level will be Critical
@param message is the error message which describes the bug
@param msgpub is message we want to show to endcustomers (can include a solution)
@param category is a dot notation to give category for the error condition
@param pythonExceptionObject is the object as it comes from a try except statement

try:
    ##do something            
except Exception,e:
    j.errorconditionhandler.raiseBug("an error",category="exceptions.init",e)

h4. raiseInputError

* params: message,category,msgpub,die,backtrace,tags
* path:/core/errorhandling/ErrorConditionHandler.py (line:145)

h4. raiseMonitoringError

* params: message,category,msgpub,die,tags
* path:/core/errorhandling/ErrorConditionHandler.py (line:164)

h4. raiseOperationalCritical

* params: message,category,msgpub,die,tags,eco,extra
* path:/core/errorhandling/ErrorConditionHandler.py (line:91)

use this to raise an operational issue about the system
@param message is message we want to use for operators
@param msgpub is message we want to show to endcustomers (can include a solution)
@param category is a dot notation to give category for the error condition

h4. raiseOperationalWarning

* params: message,category,msgpub,tags,eco
* path:/core/errorhandling/ErrorConditionHandler.py (line:134)

h4. raisePerformanceError

* params: message,category,msgpub,tags
* path:/core/errorhandling/ErrorConditionHandler.py (line:172)

h4. raiseRuntimeErrorWithEco

* params: eco,tostdout
* path:/core/errorhandling/ErrorConditionHandler.py (line:122)

h4. raiseWarning

* params: message,category,pythonExceptionObject,pythonTraceBack,msgpub,tags
* path:/core/errorhandling/ErrorConditionHandler.py (line:74)

use this to raise a bug in the code, this is the only time that a stacktrace will be asked for
@param message is the error message which describes the bug
@param msgpub is message we want to show to endcustomers (can include a solution)
@param category is a dot notation to give category for the error condition
@param pythonExceptionObject is the object as it comes from a try except statement

try:
    ##do something            
except Exception,e:
    j.errorconditionhandler.raiseBug("an error",category="exceptions.init",e)

h4. reRaiseECO

* params: eco
* path:/core/errorhandling/ErrorConditionHandler.py (line:293)

h4. sendEcoToSentry

* params: eco,modulename,hrdprefix
* path:/core/errorhandling/ErrorConditionHandler.py (line:474)

h4. sendMessageToSentry

* params: modulename,message,ttype,tags,extra,level,tb,frames,backtrace,hrdprefix
* path:/core/errorhandling/ErrorConditionHandler.py (line:504)

@param level
    fatal
    error
    warning
    info
    debug

h4. setExceptHook

* params: 
* path:/core/errorhandling/ErrorConditionHandler.py (line:34)

h4. toolStripNonAsciFromText

* params: text
* path:/core/errorhandling/ErrorConditionHandler.py (line:31)

